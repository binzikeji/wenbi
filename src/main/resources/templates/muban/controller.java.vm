package ${package.Controller};



#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import io.swagger.annotations.ApiOperation;
import org.junit.Assert;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end


@Autowired
public ${table.serviceName} ${entity}Service;

/**
 * 跳转列表页面
 * @param request
 * @param model
 * @return
 */
@RequestMapping(method= RequestMethod.GET,value = {"/${table.entityPath}Index"})
public String index(HttpServletRequest request, Model model) {
        return "${table.entityPath}ListIndex";
}

/**
 * 分页查询数据
 *
 * @param @param page<Tt></>  分页信息
 * @return
 */
@ApiOperation(value = "获取列表-分页",notes = "获取所有得信息-分页")
@ResponseBody
@GetMapping(value = "/${entity}pagefind")
public IPage<${entity}> pageVo(Page<${entity}> page){
        //siez   当前页的N条数据
        //current 当前页
        IPage<${entity}> ${entity}IPage= ${entity}Service.page(page,null);
        Assert.assertSame(page, ${entity}IPage);
        return ${entity}IPage;
}
/**
 * 跳转添加页面
 * @param request
 * @param response
 * @param model
 * @return
 */
@RequestMapping(method=RequestMethod.GET,value="/${table.entityPath}Add")
public String ${table.entityPath}Add(HttpServletRequest request,HttpServletResponse response,Model model) {
        return "${table.entityPath}Add";
}

/**
 * 跳转修改页面
 * @param id  实体ID
 * @return
 */
@RequestMapping(method=RequestMethod.GET,value="/${table.entityPath}Update")
public String ${table.entityPath}Update(Model model,Long id) {
    ${entity} ${table.entityPath} = ${entity}Service.getById(id);
        model.addAttribute("${table.entityPath}",${table.entityPath});
        return "${table.entityPath}Add";
}

/**
 * 保存和修改公用的
 * @param ${table.entityPath}  传递的实体
 * @return  0 失败  1 成功
 */
@ResponseBody
@RequestMapping(method=RequestMethod.POST,value="/${table.entityPath}Save")
public int ${table.entityPath}Save(${entity} ${table.entityPath}) {
        int count = 0;
        count = ${entity}Service.saveOrUpdate(${table.entityPath}) ? 1 : 0;
        return count;
}

/**
 * 根据id删除对象
 * @param id  实体ID
 * @return 0 失败  1 成功
 */
@ResponseBody
@RequestMapping(method= RequestMethod.POST,value="/${table.entityPath}Delete")
public int ${table.entityPath}Delete(Long id){
        int count = 0;
        count = ${entity}Service.removeById(id) ? 1 : 0;
        return count;
}

/**
 * 批量删除对象
 * @param item 实体集合ID
 * @return  0 失败  1 成功
 */
@ResponseBody
@RequestMapping(method= RequestMethod.POST,value="/${table.entityPath}BatchDelete")
public int deleteBatchIds(String item){
        int count = 0;
        List<Long> ids = (List<Long>) JSON.parse(item);
        count = ${entity}Service.removeByIds(ids) ? 1 : 0;
        return count;
}
}
